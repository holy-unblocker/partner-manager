import { API_KEY, API_URL, OUTPUT_FILE } from "./env.js";
import { validAddress } from "@shared-server/util";
import { spawnSync } from "node:child_process";
import { readFile, writeFile } from "node:fs/promises";

await fetchDomains();

// Every 30 minutes, fetch the domains
setInterval(fetchDomains, 60e3 * 30);

async function fetchDomains() {
  const res = await fetch(API_URL, {
    headers: {
      authorization: API_KEY.toString("base64url"),
    },
  });
  if (res.status !== 200)
    throw new Error(`Response was not 200 OK. Got ${res.status}`);
  // prevent any injections by filtering each domain
  const domains = (await res.text()).split(" ").filter(validAddress);

  const newContent =
    Buffer.from(`# This file is automatically generated by a script. Any changes will be lost after ~30 minutes.
set $PARTNER_BARE_DOMAINS "${domains
      .map((domain) => `uv.${domain}`)
      .join(" ")}";
set $PARTNER_RAMMERHEAD_DOMAINS "${domains
      .map((domain) => `rh.${domain}`)
      .join(" ")}";`);

  try {
    if ((await readFile(OUTPUT_FILE)).equals(newContent)) {
      console.log("Domains up-to-date.");
      return;
    }
  } catch (err) {
    if ((err as NodeJS.ErrnoException).code !== "ENOENT") throw err;
  }

  await writeFile(OUTPUT_FILE, newContent);

  console.log("Config created/changed.");

  console.log("Restart openresty");

  // Execute "openresty -t" and check the exit code
  // SUCCESS = 0
  // INVALID = 1
  const { status, error } = spawnSync("openresty -t");
  switch (status) {
    case 0:
      // Restart openresty
      spawnSync("service openresty restart");
      console.log("Openresty restarted");
      break;
    case null:
      console.error(`Openresty doesn't exist on this system?`);
      console.error(error);
      return;
    default:
      console.error(`Openresty config invalid (exit code ${status})`);
  }
}
